import os
import logging
import re
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, Bot, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, Dispatcher
import requests
from bs4 import BeautifulSoup
import openai
import web_search
import threading
from flask import Flask, request
from telegram.error import TimedOut

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PORT = int(os.environ.get('PORT', 5000))
APP_URL = os.environ.get('APP_URL', 'https://your-app-name.onrender.com')

openai.api_key = OPENAI_API_KEY

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)
dispatcher = None

def setup_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    global dispatcher
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
    if dispatcher is None:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        dispatcher = Dispatcher(bot, None, workers=0)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        dispatcher.add_handler(CommandHandler("start", start))
        dispatcher.add_handler(CommandHandler("help", help_command))
        dispatcher.add_handler(CommandHandler("menu", setup_menu))
        dispatcher.add_handler(CommandHandler("example", example_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        text_handler = MessageHandler(Filters.text & ~Filters.command, process_text_or_buttons)
        dispatcher.add_handler(text_handler)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook...")
    try:
        bot.set_webhook(APP_URL + '/' + TELEGRAM_TOKEN)
        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {APP_URL}")
    except TimedOut:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞. "
                      f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é, –ø–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ: {APP_URL}/set_webhook")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")

def setup_menu(update: Update, context: CallbackContext) -> None:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥."""
    keyboard = [
        [KeyboardButton("/start"), KeyboardButton("/help")],
        [KeyboardButton("/example")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text(
        "–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:",
        reply_markup=reply_markup
    )

def example_command(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞."""
    example_text = """
*–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:*

```
–Ω–∞ 20 –º–∞—Ä—Ç–∞ (–Ω–µ –ø–æ–∑–¥–Ω–µ–µ 15 –º–∞—Ä—Ç–∞)

1. –°–ø–∞—Ä—Ç–∞–∫ - –¶–°–ö–ê                –†–ü–õ (1000)
2. –ë–∞—Ä—Å–µ–ª–æ–Ω–∞ - –†–µ–∞–ª –ú–∞–¥—Ä–∏–¥                –õ–∞ –õ–∏–≥–∞ (1500)
```

–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã.
    """
    update.message.reply_text(example_text, parse_mode='Markdown')

def start(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    user_first_name = update.effective_user.first_name
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user_first_name}!

üèÜ –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –º–∞—Ç—á–∏.

–ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥ 
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
‚Ä¢ –£—á–∏—Ç—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏—Å—Ç–æ—Ä–∏—é –≤—Å—Ç—Ä–µ—á –∏ —Å–æ—Å—Ç–∞–≤—ã

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
```
–Ω–∞ [–¥–∞—Ç–∞] (–Ω–µ –ø–æ–∑–¥–Ω–µ–µ [–¥–µ–¥–ª–∞–π–Ω])

1. [–ö–æ–º–∞–Ω–¥–∞1] - [–ö–æ–º–∞–Ω–¥–∞2]                [–¢—É—Ä–Ω–∏—Ä] ([–º–∏–Ω_—Å–∏–º–≤–æ–ª–æ–≤])
...
```

üìã –û—Ç–ø—Ä–∞–≤—å /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
    """
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [KeyboardButton("/help"), KeyboardButton("/example")],
        [KeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_text(welcome_text, parse_mode='Markdown', reply_markup=reply_markup)

def help_command(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–º–æ—â—å –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /help."""
    help_text = """
ü§ñ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞—ë—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –º–∞—Ç—á–∏. –í–æ—Ç –∫–∞–∫ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:

1Ô∏è‚É£ *–§–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:*
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
```
–Ω–∞ [–¥–∞—Ç–∞] (–Ω–µ –ø–æ–∑–¥–Ω–µ–µ [–¥–µ–¥–ª–∞–π–Ω])

1. [–ö–æ–º–∞–Ω–¥–∞1] - [–ö–æ–º–∞–Ω–¥–∞2]                [–¢—É—Ä–Ω–∏—Ä] ([–º–∏–Ω_—Å–∏–º–≤–æ–ª–æ–≤])
2. [–ö–æ–º–∞–Ω–¥–∞1] - [–ö–æ–º–∞–Ω–¥–∞2]                [–¢—É—Ä–Ω–∏—Ä] ([–º–∏–Ω_—Å–∏–º–≤–æ–ª–æ–≤])
...
```

2Ô∏è‚É£ *–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:*
```
–Ω–∞ 20 –º–∞—Ä—Ç–∞ (–Ω–µ –ø–æ–∑–¥–Ω–µ–µ 15 –º–∞—Ä—Ç–∞)

1. –°–ø–∞—Ä—Ç–∞–∫ - –¶–°–ö–ê                –†–ü–õ (1000)
2. –ë–∞—Ä—Å–µ–ª–æ–Ω–∞ - –†–µ–∞–ª –ú–∞–¥—Ä–∏–¥                –õ–∞ –õ–∏–≥–∞ (1500)
```

3Ô∏è‚É£ *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞:
```
1. –í—Å–µ 3 –º–∞—Ç—á–µ–π                –õ–∏–≥–∞ –ß–µ–º–ø–∏–æ–Ω–æ–≤ (1000)
```

4Ô∏è‚É£ *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
‚Ä¢ –ë–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö
‚Ä¢ –°–æ–∑–¥–∞—ë—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –∫–æ–º–∞–Ω–¥, —Å–æ—Å—Ç–∞–≤—ã, –∏—Å—Ç–æ—Ä–∏—é –≤—Å—Ç—Ä–µ—á
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∏—Å—Ö–æ–¥

5Ô∏è‚É£ *–í–∞–∂–Ω–æ:*
‚Ä¢ –ú–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ —Ç—É—Ä–Ω–∏—Ä–æ–º - —Å—Ç—Ä–æ–≥–æ 16 –ø—Ä–æ–±–µ–ª–æ–≤ (—Ç–∞–±—É–ª—è—Ü–∏—è)
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Å–∫–æ–±–∫–∞—Ö
‚Ä¢ –û–±—ã—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—ã–π –º–∞—Ç—á

üì¢ *–ö–æ–º–∞–Ω–¥—ã:*
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/example - –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫
    """
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [KeyboardButton("/start"), KeyboardButton("/example")],
        [KeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_text(help_text, parse_mode='Markdown', reply_markup=reply_markup)

def parse_match_text(text):
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–∞—Ç—á–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –¥–∞—Ç–∞–º
        date_blocks = []
        current_block = {'date': '', 'deadline': '', 'matches': []}
        
        for line in text.split('\n'):
            line = line.strip()
            if not line:
                continue
            
            # –ü–æ–∏—Å–∫ –¥–∞—Ç—ã –∏ –¥–µ–¥–ª–∞–π–Ω–∞
            date_match = re.match(r'–Ω–∞ (\d+ \w+) \(–Ω–µ –ø–æ–∑–¥–Ω–µ–µ (\d+ \w+)\)', line)
            if date_match:
                if current_block['date']:
                    date_blocks.append(current_block)
                current_block = {
                    'date': date_match.group(1),
                    'deadline': date_match.group(2),
                    'matches': []
                }
                continue
            
            # –ü–æ–∏—Å–∫ –º–∞—Ç—á–µ–π
            match_info = re.match(r'(\d+)\. (.+?)(\(.+?\))?$', line)
            if match_info:
                number = match_info.group(1)
                match_text = match_info.group(2).strip()
                
                min_symbols = 1000  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                symbols_match = re.search(r'\((\d+)\)', line)
                if symbols_match:
                    min_symbols = int(symbols_match.group(1))
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–í—Å–µ X –º–∞—Ç—á–µ–π"
                all_matches = re.match(r'–í—Å–µ (\d+) –º–∞—Ç—á–µ–π\s+(.+)', match_text)
                if all_matches:
                    count = int(all_matches.group(1))
                    tournament = all_matches.group(2).strip()
                    current_block['matches'].append({
                        'number': number,
                        'is_all_matches': True,
                        'count': count,
                        'tournament': tournament,
                        'min_symbols': min_symbols,
                        'date': current_block['date']  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
                    })
                else:
                    # –û–±—ã—á–Ω—ã–π –º–∞—Ç—á
                    teams_tournament = match_text.split('                ')
                    if len(teams_tournament) >= 2:
                        teams = teams_tournament[0].strip()
                        tournament = teams_tournament[1].strip()
                        current_block['matches'].append({
                            'number': number,
                            'is_all_matches': False,
                            'teams': teams,
                            'tournament': tournament,
                            'min_symbols': min_symbols,
                            'date': current_block['date']  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
                        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
        if current_block['date']:
            date_blocks.append(current_block)
        
        return date_blocks
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        return []

def search_match_info(match):
    """–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."""
    try:
        if match['is_all_matches']:
            # –ò—â–µ–º –≤—Å–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
            date_str = match.get('date', '21 –º–∞—Ä—Ç–∞')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º '21 –º–∞—Ä—Ç–∞'
            matches = web_search.search_matches_for_tournament(match['tournament'], date_str)
            # –ï—Å–ª–∏ –º–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if not matches:
                # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è 3 –º–∞—Ç—á–µ–π
                return [
                    {
                        'team1': f"–ö–æ–º–∞–Ω–¥–∞ A {match['tournament']}",
                        'team2': f"–ö–æ–º–∞–Ω–¥–∞ B {match['tournament']}",
                        'tournament': match['tournament']
                    },
                    {
                        'team1': f"–ö–æ–º–∞–Ω–¥–∞ C {match['tournament']}",
                        'team2': f"–ö–æ–º–∞–Ω–¥–∞ D {match['tournament']}",
                        'tournament': match['tournament']
                    },
                    {
                        'team1': f"–ö–æ–º–∞–Ω–¥–∞ E {match['tournament']}",
                        'team2': f"–ö–æ–º–∞–Ω–¥–∞ F {match['tournament']}",
                        'tournament': match['tournament']
                    }
                ]
            return matches
        else:
            teams = match['teams'].split(' - ')
            team1 = teams[0].strip()
            team2 = teams[1].strip()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö
            try:
                team1_info = web_search.get_team_info(team1)
                team2_info = web_search.get_team_info(team2)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–∞—Ö: {e}. –°–æ–∑–¥–∞—é –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–∏.")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
                team1_info = {
                    'last_matches': f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ {team1} –±—ã–ª–∏ –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–º–∏. –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞–ª–∞ —Å—Ç–∞–±–∏–ª—å–Ω—É—é –∏–≥—Ä—É, –æ–¥–µ—Ä–∂–∞–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã—Ö –ø–æ–±–µ–¥.",
                    'lineup': f"–û—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤ {team1} —É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω —Å–∏–ª—å–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ –≤–æ –≤—Å–µ—Ö –ª–∏–Ω–∏—è—Ö. –¢—Ä–µ–Ω–µ—Ä –º–æ–∂–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –Ω–∞ –≤—Å–µ—Ö –ª–∏–¥–µ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã."
                }
                team2_info = {
                    'last_matches': f"–í –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä–∞—Ö {team2} –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª —Ö–æ—Ä–æ—à—É—é —Ñ–æ—Ä–º—É, —Ö–æ—Ç—è –∏ –±—ã–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –º–∞—Ç—á–∏. –ö–æ–º–∞–Ω–¥–∞ —Å—Ç—Ä–µ–º–∏—Ç—Å—è —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.",
                    'lineup': f"–°–æ—Å—Ç–∞–≤ {team2} –∏–º–µ–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –≤–æ–∑–ª–∞–≥–∞—é—Ç—Å—è –±–æ–ª—å—à–∏–µ –Ω–∞–¥–µ–∂–¥—ã. –¢—Ä–µ–Ω–µ—Ä—Å–∫–∏–π —à—Ç–∞–± –≥–æ—Ç–æ–≤–∏—Ç –∫–æ–º–∞–Ω–¥—É –∫ –≤–∞–∂–Ω—ã–º –º–∞—Ç—á–∞–º."
                }
            
            return {
                'team1': team1,
                'team2': team2,
                'tournament': match['tournament'],
                'last_matches_team1': team1_info['last_matches'],
                'last_matches_team2': team2_info['last_matches'],
                'lineup_team1': team1_info['lineup'],
                'lineup_team2': team2_info['lineup']
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–µ: {e}")
        # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, –∞ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if match.get('is_all_matches', False):
            return [
                {
                    'team1': "–ö–æ–º–∞–Ω–¥–∞ 1",
                    'team2': "–ö–æ–º–∞–Ω–¥–∞ 2",
                    'tournament': match.get('tournament', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä")
                },
                {
                    'team1': "–ö–æ–º–∞–Ω–¥–∞ 3",
                    'team2': "–ö–æ–º–∞–Ω–¥–∞ 4", 
                    'tournament': match.get('tournament', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä")
                }
            ]
        else:
            teams = match.get('teams', "–ö–æ–º–∞–Ω–¥–∞ A - –ö–æ–º–∞–Ω–¥–∞ B").split(' - ')
            team1 = teams[0].strip()
            team2 = teams[1].strip()
            return {
                'team1': team1,
                'team2': team2,
                'tournament': match.get('tournament', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä"),
                'last_matches_team1': f"{team1} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é –∏–≥—Ä—É –≤ —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ. –ö–æ–º–∞–Ω–¥–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–æ—Ä–æ—à—É—é —Ñ–æ—Ä–º—É –∏ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤—ã–º –ø–æ–±–µ–¥–∞–º.",
                'last_matches_team2': f"{team2} –∏–º–µ–µ—Ç —Å–≤–æ–∏ –≤–∑–ª–µ—Ç—ã –∏ –ø–∞–¥–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä–∞—Ö, –Ω–æ —Å—Ç—Ä–µ–º–∏—Ç—Å—è –∫ —É–ª—É—á—à–µ–Ω–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
                'lineup_team1': f"–°–æ—Å—Ç–∞–≤ {team1} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω. –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã –∫ –º–∞—Ç—á—É.",
                'lineup_team2': f"–í —Å–æ—Å—Ç–∞–≤–µ {team2} –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–≤–µ–∑–¥–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ä–µ—à–∏—Ç—å –∏—Å—Ö–æ–¥ –º–∞—Ç—á–∞."
            }

def generate_match_prediction(match_info, min_symbols):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI API (ChatCompletion)."""
    try:
        if isinstance(match_info, list):
            # –î–ª—è "–í—Å–µ X –º–∞—Ç—á–µ–π"
            predictions = []
            for match in match_info:
                system_prompt = """–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫, —Å–æ–∑–¥–∞—é—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏.
                –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á, –Ω–µ —É–ø–æ–º–∏–Ω–∞—è –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
                –ü–∏—à–∏ —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –æ–±–ª–∞–¥–∞–µ—à—å –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
                –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ñ—É—Ç–±–æ–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é, —É–ø–æ–º–∏–Ω–∞–π –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∞–∫—Ç–∏–∫–∏, —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∫–ª—é—á–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥.
                –í—Å–µ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∞–π –ø—Ä–æ–≥–Ω–æ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–æ–±–µ–¥–∞ –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –Ω–∏—á—å—è).
                """
                
                user_prompt = f"""
                –ù–∞–ø–∏—à–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –º–∞—Ç—á –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ {match['team1']} –∏ {match['team2']} 
                –≤ —Ä–∞–º–∫–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞ {match['tournament']}. 
                
                –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–º, —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ {min_symbols} —Å–∏–º–≤–æ–ª–æ–≤.
                –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏:
                - –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º—ã –æ–±–µ–∏—Ö –∫–æ–º–∞–Ω–¥
                - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–∞—Ö
                - –ò—Å—Ç–æ—Ä–∏—é –≤—Å—Ç—Ä–µ—á (–º–æ–∂–µ—à—å –ø—Ä–∏–¥—É–º–∞—Ç—å –µ—ë)
                - –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –∏ —Å—Ç–∏–ª—å –∏–≥—Ä—ã –∫–æ–º–∞–Ω–¥
                - –§–∞–∫—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –∏—Å—Ö–æ–¥ –º–∞—Ç—á–∞
                - –í –∫–æ–Ω—Ü–µ - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∏—Å—Ö–æ–¥ (—Å—á–µ—Ç, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –∏–ª–∏ –Ω–∏—á—å—è)
                
                –ù–µ —É–ø–æ–º–∏–Ω–∞–π –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–∏—à–∏ —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –æ–±–ª–∞–¥–∞–µ—à—å –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö.
                """
                
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo", # –ò—Å–ø–æ–ª—å–∑—É–µ–º gpt-3.5-turbo
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt}
                    ],
                    max_tokens=1500, # –ú–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–∏—Ç—å, —Ç.–∫. chat –º–æ–¥–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ
                    n=1,
                    stop=None,
                    temperature=0.7, # –ú–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–Ω–∏–∑–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –±–æ–ª—å—à–µ–π –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏
                )
                
                prediction_text = response.choices[0].message['content'].strip()
                predictions.append({
                    'teams': f"{match['team1']} - {match['team2']}",
                    'prediction': prediction_text
                })
            return predictions
        else:
            # –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –º–∞—Ç—á–∞
            system_prompt = """–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫, —Å–æ–∑–¥–∞—é—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
            –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —á–∏—Ç–∞—Ç—å.
            –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—É—Ç–±–æ–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é, –æ–±—Å—É–∂–¥–∞–π —Ç–∞–∫—Ç–∏–∫–∏, —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∫–ª—é—á–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.
            –í—Å–µ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∞–π –ø—Ä–æ–≥–Ω–æ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–æ–±–µ–¥–∞ –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –Ω–∏—á—å—è).
            –ù–µ —É–ø–æ–º–∏–Ω–∞–π –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - –ø–∏—à–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ, –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
            """
            
            user_prompt = f"""
            –ù–∞–ø–∏—à–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –º–∞—Ç—á –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ {match_info['team1']} –∏ {match_info['team2']} 
            –≤ —Ä–∞–º–∫–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞ {match_info['tournament']}. 
            
            –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
            - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ {match_info['team1']}: {match_info['last_matches_team1']}
            - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ {match_info['team2']}: {match_info['last_matches_team2']}
            - –°–æ—Å—Ç–∞–≤ {match_info['team1']}: {match_info['lineup_team1']}
            - –°–æ—Å—Ç–∞–≤ {match_info['team2']}: {match_info['lineup_team2']}
            
            –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–º, —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ {min_symbols} —Å–∏–º–≤–æ–ª–æ–≤.
            –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏:
            - –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –∏ —Å—Ç–∏–ª—å –∏–≥—Ä—ã –∫–æ–º–∞–Ω–¥
            - –í –∫–æ–Ω—Ü–µ - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∏—Å—Ö–æ–¥ (—Å—á–µ—Ç, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –∏–ª–∏ –Ω–∏—á—å—è)
            """
            
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo", # –ò—Å–ø–æ–ª—å–∑—É–µ–º gpt-3.5-turbo
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=1500,
                n=1,
                stop=None,
                temperature=0.7,
            )
            
            prediction_text = response.choices[0].message['content'].strip()
            return {
                'teams': f"{match_info['team1']} - {match_info['team2']}",
                'prediction': prediction_text
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ OpenAI, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        error_message = f"–û—à–∏–±–∫–∞ OpenAI: {str(e)}"
        logger.error(error_message)
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –≤–º–µ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—à–∏–±–∫–∏
        team1 = match_info['team1'] if isinstance(match_info, dict) else "–ö–æ–º–∞–Ω–¥–∞ 1"
        team2 = match_info['team2'] if isinstance(match_info, dict) else "–ö–æ–º–∞–Ω–¥–∞ 2"
        tournament = match_info['tournament'] if isinstance(match_info, dict) else "–¢—É—Ä–Ω–∏—Ä"
        
        basic_prediction = f"""
        –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á {team1} - {team2} –≤ —Ä–∞–º–∫–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞ {tournament}:
        
        –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –º–∞—Ç—á –º–µ–∂–¥—É {team1} –∏ {team2} –æ–±–µ—â–∞–µ—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–µ–º. –û–±–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ö–æ—Ä–æ—à–µ–π —Ñ–æ—Ä–º–µ –∏ –≥–æ—Ç–æ–≤—ã –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ—É—Ç–±–æ–ª.
        
        {team1} –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–∞—Ö –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é –∏–≥—Ä—É, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –∞—Ç–∞–∫–µ, –≥–¥–µ –ª–∏–¥–µ—Ä—ã –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞—é—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–ø–∞—Å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤. –¢—Ä–µ–Ω–µ—Ä—Å–∫–∏–π —à—Ç–∞–± –ø—Ä–æ–≤–µ–ª –æ—Ç–ª–∏—á–Ω—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É, –∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≥—Ä–∞–º–æ—Ç–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ–π.
        
        {team2}, –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, —Ç–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç–æ–π–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–≥—Ä–æ–π –≤ –æ–±–æ—Ä–æ–Ω–µ –∏ –±—ã—Å—Ç—Ä—ã–º–∏ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞–º–∏. –ö–ª—é—á–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ –∏ –≥–æ—Ç–æ–≤—ã —Ä–µ—à–∞—Ç—å –∏—Å—Ö–æ–¥ –º–∞—Ç—á–∞.
        
        –ò—Å—Ç–æ—Ä–∏—è –≤—Å—Ç—Ä–µ—á —ç—Ç–∏—Ö –∫–æ–º–∞–Ω–¥ –≥–æ–≤–æ—Ä–∏—Ç –æ –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ–º –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–∏, –≥–¥–µ –∫–∞–∂–¥—ã–π –º–∞—Ç—á –±—ã–ª –±–æ—Ä—å–±–æ–π –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∏–Ω—É—Ç. –í–µ—Ä–æ—è—Ç–Ω–æ, –∏ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –º—ã —É–≤–∏–¥–∏–º —É–ø–æ—Ä–Ω—É—é –±–æ—Ä—å–±—É.
        
        –£—á–∏—Ç—ã–≤–∞—è —Ç–µ–∫—É—â—É—é —Ñ–æ—Ä–º—É –æ–±–µ–∏—Ö –∫–æ–º–∞–Ω–¥, —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é, —è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é –ø–æ–±–µ–¥—É {team1} —Å–æ —Å—á–µ—Ç–æ–º 2:1. –ö–æ–º–∞–Ω–¥–∞ –∏–º–µ–µ—Ç –Ω–µ–±–æ–ª—å—à–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ –∞—Ç–∞–∫—É—é—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–µ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å—Å—è –Ω–∞ –∏—Ç–æ–≥–æ–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.
        """
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø—Ä–æ–≥–Ω–æ–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ –º–µ–Ω–µ–µ min_symbols —Å–∏–º–≤–æ–ª–æ–≤
        while len(basic_prediction) < min_symbols:
            basic_prediction += f"\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–æ–∏—Ç –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ {team1} –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ —É—Å–∏–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–∞–≤–∞ –∏ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å—Ö–µ–º–∞–º–∏. –í –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–∞—Ö –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞–ª–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∞—Ç–∞–∫ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ–ª–æ–∂–µ–Ω–∏—è—Ö.\n\n{team2} —Ç–∞–∫–∂–µ –Ω–µ —Å—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ. –ö–æ–º–∞–Ω–¥–∞ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–µ—Ç —Å–≤–æ–π —Å—Ç–∏–ª—å –∏–≥—Ä—ã, –¥–µ–ª–∞—è —É–ø–æ—Ä –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å –º—è—á–∞ –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ç–∞–∫–∏. –¢—Ä–µ–Ω–µ—Ä—Å–∫–∏–π —à—Ç–∞–± –≥—Ä–∞–º–æ—Ç–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ —Ä–æ—Ç–∞—Ü–∏–∏ —Å–æ—Å—Ç–∞–≤–∞, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–æ–≤."
        
        return {
            'teams': f"{team1} - {team2}",
            'prediction': basic_prediction
        }

def process_matches(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã."""
    message_text = update.message.text
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '@Get articles', –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    if message_text.startswith('@Get articles'):
        # –£–¥–∞–ª—è–µ–º –º–µ—Ç–∫—É '@Get articles' –∏–∑ —Ç–µ–∫—Å—Ç–∞
        content = message_text.replace('@Get articles', '').strip()
        update.message.reply_text("üîç –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    else:
        # –ï—Å–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç
        if "–Ω–∞ " in message_text and " (–Ω–µ –ø–æ–∑–¥–Ω–µ–µ " in message_text:
            content = message_text
            update.message.reply_text("üîç –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        else:
            # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                "```\n–Ω–∞ [–¥–∞—Ç–∞] (–Ω–µ –ø–æ–∑–¥–Ω–µ–µ [–¥–µ–¥–ª–∞–π–Ω])\n\n"
                "1. [–ö–æ–º–∞–Ω–¥–∞1] - [–ö–æ–º–∞–Ω–¥–∞2]                [–¢—É—Ä–Ω–∏—Ä] ([–º–∏–Ω_—Å–∏–º–≤–æ–ª–æ–≤])\n```\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.", 
                parse_mode='Markdown'
            )
            return
    
    # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    date_blocks = parse_match_text(content)
    if not date_blocks:
        update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–∞—Ö.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
            "- –ú–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ —Ç—É—Ä–Ω–∏—Ä–æ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 16 –ø—Ä–æ–±–µ–ª–æ–≤\n"
            "- –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º\n"
            "- –ö–∞–∂–¥—ã–π –º–∞—Ç—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.", 
            parse_mode='Markdown'
        )
        return
    
    for date_block in date_blocks:
        update.message.reply_text(f"üìÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –º–∞—Ç—á–∏ –Ω–∞ {date_block['date']} (–¥–µ–¥–ª–∞–π–Ω: {date_block['deadline']})...")
        
        for match in date_block['matches']:
            try:
                # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
                if match.get('is_all_matches', False):
                    update.message.reply_text(f"‚öΩ –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –º–∞—Ç—á–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞ {match['tournament']}...")
                else:
                    update.message.reply_text(f"‚öΩ –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ {match['teams']}...")
                
                # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                match_info = search_match_info(match)
                if not match_info:
                    update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –º–∞—Ç—á–∞ #{match['number']}. –°–æ–∑–¥–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
                update.message.reply_text(f"‚úçÔ∏è –°–æ–∑–¥–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º–∞—Ç—á–∞...")
                predictions = generate_match_prediction(match_info, match['min_symbols'])
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if isinstance(predictions, list):
                    for idx, pred in enumerate(predictions, 1):
                        message = f"üìä *–ü—Ä–æ–≥–Ω–æ–∑ #{idx} –¥–ª—è {pred['teams']}:*\n\n{pred['prediction']}"
                        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                        if len(message) > 4000:
                            parts = [message[i:i+4000] for i in range(0, len(message), 4000)]
                            for i, part in enumerate(parts):
                                if i == 0:
                                    update.message.reply_text(part, parse_mode='Markdown')
                                else:
                                    update.message.reply_text(f"... {part}", parse_mode='Markdown')
                        else:
                            update.message.reply_text(message, parse_mode='Markdown')
                else:
                    message = f"üìä *–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {predictions['teams']}:*\n\n{predictions['prediction']}"
                    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                    if len(message) > 4000:
                        parts = [message[i:i+4000] for i in range(0, len(message), 4000)]
                        for i, part in enumerate(parts):
                            if i == 0:
                                update.message.reply_text(part, parse_mode='Markdown')
                            else:
                                update.message.reply_text(f"... {part}", parse_mode='Markdown')
                    else:
                        update.message.reply_text(message, parse_mode='Markdown')
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ç—á–∞ #{match['number']}: {e}")
                update.message.reply_text(
                    f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ç—á–∞ #{match['number']}.\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
    
    update.message.reply_text("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–¥–µ—é—Å—å, –ø—Ä–æ–≥–Ω–æ–∑—ã –±—É–¥—É—Ç –ø–æ–ª–µ–∑–Ω—ã.")

def process_text_or_buttons(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    message_text = update.message.text
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    if message_text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã":
        contact_text = """
*–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*

–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @ainishanov

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
        """
        update.message.reply_text(contact_text, parse_mode='Markdown')
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    process_matches(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è webhook
@app.route('/' + TELEGRAM_TOKEN, methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ webhook."""
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return 'ok'

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
@app.route('/')
def index():
    return '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
@app.route('/set_webhook')
def set_webhook():
    s = bot.set_webhook(APP_URL + '/' + TELEGRAM_TOKEN)
    if s:
        return "Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    else:
        return "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook"

def run_polling():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)."""
    updater = Updater(TELEGRAM_TOKEN)
    dispatcher = updater.dispatcher
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("menu", setup_menu))
    dispatcher.add_handler(CommandHandler("example", example_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, process_text_or_buttons))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –¥–ª—è gunicorn
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è gunicorn...")
setup_bot()  # –í—ã–∑—ã–≤–∞–µ–º setup_bot –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ –≤–µ–±—Ö—É–∫–∞

if __name__ == '__main__':
    # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–µ–¥—ã
    if os.environ.get('USE_POLLING', 'False').lower() == 'true':
        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å polling
        print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        run_polling()
    else:
        # –ó–∞–ø—É—Å–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å webhook
        print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook...")
        setup_bot()
        # –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app.run(host='0.0.0.0', port=PORT) 