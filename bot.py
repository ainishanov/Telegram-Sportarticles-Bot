import os
import logging
import re
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, Bot
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, Dispatcher
import requests
from bs4 import BeautifulSoup
import openai
import web_search
import threading
from flask import Flask, request
from telegram.error import TimedOut
from sports_api import TheSportsDB

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PORT = int(os.environ.get('PORT', 5000))
APP_URL = os.environ.get('APP_URL', 'https://your-app-name.onrender.com')

openai.api_key = OPENAI_API_KEY

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)
dispatcher = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
sports_api = TheSportsDB()

def start(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –º–∞—Ç—á–∏. '
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n'
        '–Ω–∞ [–¥–∞—Ç–∞] (–Ω–µ –ø–æ–∑–¥–Ω–µ–µ [–¥–µ–¥–ª–∞–π–Ω])\n\n'
        '1. [–ö–æ–º–∞–Ω–¥–∞1] - [–ö–æ–º–∞–Ω–¥–∞2]                [–¢—É—Ä–Ω–∏—Ä] ([–º–∏–Ω_—Å–∏–º–≤–æ–ª–æ–≤])\n'
        '...\n\n'
        '–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /team [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã] –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ.'
    )

def help_command(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–º–æ—â—å –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /help."""
    update.message.reply_text(
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n'
        '/team [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã] - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ\n'
        '/start - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n'
        '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
        '–Ω–∞ [–¥–∞—Ç–∞] (–Ω–µ –ø–æ–∑–¥–Ω–µ–µ [–¥–µ–¥–ª–∞–π–Ω])\n\n'
        '1. [–ö–æ–º–∞–Ω–¥–∞1] - [–ö–æ–º–∞–Ω–¥–∞2]                [–¢—É—Ä–Ω–∏—Ä] ([–º–∏–Ω_—Å–∏–º–≤–æ–ª–æ–≤])\n'
        '2. –í—Å–µ [X] –º–∞—Ç—á–µ–π                [–¢—É—Ä–Ω–∏—Ä] ([–º–∏–Ω_—Å–∏–º–≤–æ–ª–æ–≤])\n'
        '...'
    )

def team_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /team –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if not context.args:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /team –°–ø–∞—Ä—Ç–∞–∫")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    team_name = ' '.join(context.args)
    update.message.reply_text(f"–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ: {team_name}...")
    
    try:
        # –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        team_translations = {
            # –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
            "–°–ø–∞—Ä—Ç–∞–∫": "Spartak Moscow",
            "–¶–°–ö–ê": "CSKA Moscow",
            "–ó–µ–Ω–∏—Ç": "Zenit Saint Petersburg",
            "–õ–æ–∫–æ–º–æ—Ç–∏–≤": "Lokomotiv Moscow",
            "–î–∏–Ω–∞–º–æ": "Dynamo Moscow",
            "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä": "FC Krasnodar",
            "–†–æ—Å—Ç–æ–≤": "FC Rostov",
            "–°–æ—á–∏": "PFC Sochi",
            
            # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
            "–†–µ–∞–ª": "Real Madrid",
            "–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥": "Real Madrid",
            "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞": "FC Barcelona",
            "–ê—Ç–ª–µ—Ç–∏–∫–æ": "Atletico Madrid",
            "–ë–∞–≤–∞—Ä–∏—è": "Bayern Munich",
            "–ë–æ—Ä—É—Å—Å–∏—è": "Borussia Dortmund",
            "–ü–°–ñ": "Paris Saint-Germain",
            "–ú–Æ": "Manchester United",
            "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥": "Manchester United",
            "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏": "Manchester City",
            "–õ–∏–≤–µ—Ä–ø—É–ª—å": "Liverpool FC",
            "–ß–µ–ª—Å–∏": "Chelsea FC",
            "–ê—Ä—Å–µ–Ω–∞–ª": "Arsenal FC",
            "–¢–æ—Ç—Ç–µ–Ω—Ö—ç–º": "Tottenham Hotspur",
            "–Æ–≤–µ–Ω—Ç—É—Å": "Juventus FC",
            "–ú–∏–ª–∞–Ω": "AC Milan",
            "–ò–Ω—Ç–µ—Ä": "Inter Milan",
            "–ù–∞–ø–æ–ª–∏": "SSC Napoli",
            "–†–æ–º–∞": "AS Roma",
            "–ê—è–∫—Å": "Ajax Amsterdam",
            "–ü–æ—Ä—Ç—É": "FC Porto",
            "–ë–µ–Ω—Ñ–∏–∫–∞": "SL Benfica",
            "–õ—é—Ü–µ—Ä–Ω": "FC Luzern",
            "–ö—Å–∞–º–∞–∫—Å": "Neuchatel Xamax"
        }
        
        # –ò—â–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è
        english_name = team_translations.get(team_name, team_name)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
        team_data = sports_api.search_team(english_name)
        
        if not team_data or 'teams' not in team_data or not team_data['teams']:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–ª–æ–≤—É
            first_word = english_name.split()[0]
            team_data = sports_api.search_team(first_word)
            
            if not team_data or 'teams' not in team_data or not team_data['teams']:
                update.message.reply_text(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ {team_name}.")
                return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        team = team_data['teams'][0]
        team_id = team['idTeam']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        message = f"*{team['strTeam']}*\n\n"
        message += f"üåç –°—Ç—Ä–∞–Ω–∞: {team.get('strCountry', '–ù/–î')}\n"
        message += f"üèÜ –õ–∏–≥–∞: {team.get('strLeague', '–ù/–î')}\n"
        message += f"üèüÔ∏è –°—Ç–∞–¥–∏–æ–Ω: {team.get('strStadium', '–ù/–î')}\n"
        message += f"üìÖ –ì–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è: {team.get('intFormedYear', '–ù/–î')}\n"
        message += f"üåê –°–∞–π—Ç: {team.get('strWebsite', '–ù/–î')}\n\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        update.message.reply_text(message, parse_mode='Markdown')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–∞—Ö
        matches = sports_api.get_last_events_by_team(team_id)
        matches_message = "*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏:*\n"
        
        if matches and 'results' in matches and matches['results']:
            for match in matches['results'][:5]:
                date = match.get('dateEvent', '–ù/–î')
                home = match.get('strHomeTeam', '–ù/–î')
                away = match.get('strAwayTeam', '–ù/–î')
                home_score = match.get('intHomeScore', '?')
                away_score = match.get('intAwayScore', '?')
                matches_message += f"- {date}: {home} {home_score}:{away_score} {away}\n"
        else:
            matches_message += "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
        
        update.message.reply_text(matches_message, parse_mode='Markdown')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–∞—Ö –∫–æ–º–∞–Ω–¥—ã
        players = sports_api.list_all_players_in_team(team_id)
        players_message = "*–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã:*\n"
        
        if players and 'player' in players and players['player']:
            for player in players['player'][:10]:
                name = player.get('strPlayer', '–ù/–î')
                position = player.get('strPosition', '–ù/–î')
                nationality = player.get('strNationality', '–ù/–î')
                players_message += f"- {name} ({position}, {nationality})\n"
        else:
            players_message += "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–∞–≤–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è API)\n"
        
        update.message.reply_text(players_message, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ {team_name}: {e}")
        update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ {team_name}.")

def parse_match_text(text):
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–∞—Ç—á–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –¥–∞—Ç–∞–º
        date_blocks = []
        current_block = {'date': '', 'deadline': '', 'matches': []}
        
        for line in text.split('\n'):
            line = line.strip()
            if not line:
                continue
            
            # –ü–æ–∏—Å–∫ –¥–∞—Ç—ã –∏ –¥–µ–¥–ª–∞–π–Ω–∞
            date_match = re.match(r'–Ω–∞ (\d+ \w+) \(–Ω–µ –ø–æ–∑–¥–Ω–µ–µ (\d+ \w+)\)', line)
            if date_match:
                if current_block['date']:
                    date_blocks.append(current_block)
                current_block = {
                    'date': date_match.group(1),
                    'deadline': date_match.group(2),
                    'matches': []
                }
                continue
            
            # –ü–æ–∏—Å–∫ –º–∞—Ç—á–µ–π
            match_info = re.match(r'(\d+)\. (.+?)(\(.+?\))?$', line)
            if match_info:
                number = match_info.group(1)
                match_text = match_info.group(2).strip()
                
                min_symbols = 1000  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                symbols_match = re.search(r'\((\d+)\)', line)
                if symbols_match:
                    min_symbols = int(symbols_match.group(1))
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–í—Å–µ X –º–∞—Ç—á–µ–π"
                all_matches = re.match(r'–í—Å–µ (\d+) –º–∞—Ç—á–µ–π\s+(.+)', match_text)
                if all_matches:
                    count = int(all_matches.group(1))
                    tournament = all_matches.group(2).strip()
                    current_block['matches'].append({
                        'number': number,
                        'is_all_matches': True,
                        'count': count,
                        'tournament': tournament,
                        'min_symbols': min_symbols,
                        'date': current_block['date']  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
                    })
                else:
                    # –û–±—ã—á–Ω—ã–π –º–∞—Ç—á
                    teams_tournament = match_text.split('                ')
                    if len(teams_tournament) >= 2:
                        teams = teams_tournament[0].strip()
                        tournament = teams_tournament[1].strip()
                        current_block['matches'].append({
                            'number': number,
                            'is_all_matches': False,
                            'teams': teams,
                            'tournament': tournament,
                            'min_symbols': min_symbols,
                            'date': current_block['date']  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
                        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
        if current_block['date']:
            date_blocks.append(current_block)
        
        return date_blocks
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        return []

def search_match_info(match):
    """–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."""
    try:
        if match['is_all_matches']:
            # –ò—â–µ–º –≤—Å–µ –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
            date_str = match.get('date', '21 –º–∞—Ä—Ç–∞')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º '21 –º–∞—Ä—Ç–∞'
            matches = web_search.search_matches_for_tournament(match['tournament'], date_str)
            return matches
        else:
            teams = match['teams'].split(' - ')
            team1 = teams[0].strip()
            team2 = teams[1].strip()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö
            team1_info = web_search.get_team_info(team1)
            team2_info = web_search.get_team_info(team2)
            
            return {
                'team1': team1,
                'team2': team2,
                'tournament': match['tournament'],
                'last_matches_team1': team1_info['last_matches'],
                'last_matches_team2': team2_info['last_matches'],
                'lineup_team1': team1_info['lineup'],
                'lineup_team2': team2_info['lineup']
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–µ: {e}")
        return None

def generate_match_prediction(match_info, min_symbols):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI API (ChatCompletion)."""
    try:
        if isinstance(match_info, list):
            # –î–ª—è "–í—Å–µ X –º–∞—Ç—á–µ–π"
            predictions = []
            for match in match_info:
                system_prompt = "–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫, —Å–æ–∑–¥–∞—é—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏."
                user_prompt = f"""
                –ù–∞–ø–∏—à–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –º–∞—Ç—á –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ {match['team1']} –∏ {match['team2']} 
                –≤ —Ä–∞–º–∫–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞ {match['tournament']}. 
                –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ {min_symbols} —Å–∏–º–≤–æ–ª–æ–≤.
                –£—á—Ç–∏, —á—Ç–æ –∫–æ–º–∞–Ω–¥—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–∞–∫ {match['team1']} –∏ {match['team2']} –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞.
                """
                
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo", # –ò—Å–ø–æ–ª—å–∑—É–µ–º gpt-3.5-turbo
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt}
                    ],
                    max_tokens=1500, # –ú–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–∏—Ç—å, —Ç.–∫. chat –º–æ–¥–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ
                    n=1,
                    stop=None,
                    temperature=0.7, # –ú–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–Ω–∏–∑–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –±–æ–ª—å—à–µ–π –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏
                )
                
                prediction_text = response.choices[0].message['content'].strip()
                predictions.append({
                    'teams': f"{match['team1']} - {match['team2']}",
                    'prediction': prediction_text
                })
            return predictions
        else:
            # –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –º–∞—Ç—á–∞
            system_prompt = "–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫, —Å–æ–∑–¥–∞—é—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
            user_prompt = f"""
            –ù–∞–ø–∏—à–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –º–∞—Ç—á –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ {match_info['team1']} –∏ {match_info['team2']} 
            –≤ —Ä–∞–º–∫–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞ {match_info['tournament']}. 
            
            –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
            - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ {match_info['team1']}: {match_info['last_matches_team1']}
            - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ {match_info['team2']}: {match_info['last_matches_team2']}
            - –°–æ—Å—Ç–∞–≤ {match_info['team1']}: {match_info['lineup_team1']}
            - –°–æ—Å—Ç–∞–≤ {match_info['team2']}: {match_info['lineup_team2']}
            
            –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ {min_symbols} —Å–∏–º–≤–æ–ª–æ–≤ –∏ –±—ã—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º.
            """
            
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo", # –ò—Å–ø–æ–ª—å–∑—É–µ–º gpt-3.5-turbo
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=1500,
                n=1,
                stop=None,
                temperature=0.7,
            )
            
            prediction_text = response.choices[0].message['content'].strip()
            return {
                'teams': f"{match_info['team1']} - {match_info['team2']}",
                'prediction': prediction_text
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ OpenAI, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        error_message = f"–û—à–∏–±–∫–∞ OpenAI: {str(e)}"
        logger.error(error_message)
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞. {error_message}"

def process_matches(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã."""
    message_text = update.message.text
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '@Get articles', –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    if message_text.startswith('@Get articles'):
        # –£–¥–∞–ª—è–µ–º –º–µ—Ç–∫—É '@Get articles' –∏–∑ —Ç–µ–∫—Å—Ç–∞
        content = message_text.replace('@Get articles', '').strip()
        update.message.reply_text("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    else:
        # –ï—Å–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç
        if "–Ω–∞ " in message_text and " (–Ω–µ –ø–æ–∑–¥–Ω–µ–µ " in message_text:
            content = message_text
            update.message.reply_text("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        else:
            # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            return
    
    # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    date_blocks = parse_match_text(content)
    if not date_blocks:
        update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–∞—Ö.")
        return
    
    for date_block in date_blocks:
        update.message.reply_text(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –º–∞—Ç—á–∏ –Ω–∞ {date_block['date']} (–¥–µ–¥–ª–∞–π–Ω: {date_block['deadline']})...")
        
        for match in date_block['matches']:
            try:
                # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                match_info = search_match_info(match)
                if not match_info:
                    update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –º–∞—Ç—á–∞ #{match['number']}.")
                    continue
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
                predictions = generate_match_prediction(match_info, match['min_symbols'])
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if isinstance(predictions, list):
                    for idx, pred in enumerate(predictions, 1):
                        message = f"–ü—Ä–æ–≥–Ω–æ–∑ #{idx} –¥–ª—è {pred['teams']}:\n\n{pred['prediction']}"
                        update.message.reply_text(message[:4096])  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
                else:
                    message = f"–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {predictions['teams']}:\n\n{predictions['prediction']}"
                    update.message.reply_text(message[:4096])  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ç—á–∞ #{match['number']}: {e}")
                update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ç—á–∞ #{match['number']}.")
    
    update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è webhook
@app.route('/' + TELEGRAM_TOKEN, methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ webhook."""
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return 'ok'

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
@app.route('/')
def index():
    return '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –¥–ª—è –∫–æ–º–∞–Ω–¥
@app.route('/test_api')
def test_api():
    try:
        import web_search
        import json
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        def get_team_info_formatted(team_name, english_name):
            result = "<h3>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–ª—è –∫–æ–º–∞–Ω–¥—ã: " + team_name + " (–∞–Ω–≥–ª: " + english_name + ")</h3>"
            
            # URL –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã
            url = f"https://www.thesportsdb.com/api/v1/json/3/searchteams.php?t={english_name}"
            result += f"<p>URL –∑–∞–ø—Ä–æ—Å–∞: <a href='{url}' target='_blank'>{url}</a></p>"
            
            try:
                search_response = requests.get(url)
                search_data = search_response.json()
                
                if search_data.get('teams'):
                    team = search_data['teams'][0]
                    team_id = team['idTeam']
                    result += f"<p>–ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {team['strTeam']} (ID: {team_id})</p>"
                    result += f"<p>–õ–∏–≥–∞: {team.get('strLeague', '–ù/–î')}, –°—Ç—Ä–∞–Ω–∞: {team.get('strCountry', '–ù/–î')}</p>"
                    
                    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏
                    matches_url = f"https://www.thesportsdb.com/api/v1/json/3/eventslast.php?id={team_id}"
                    result += f"<p>URL –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π: <a href='{matches_url}' target='_blank'>{matches_url}</a></p>"
                    
                    matches_response = requests.get(matches_url)
                    matches_data = matches_response.json()
                    
                    result += "<h4>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏:</h4>"
                    if matches_data.get('results'):
                        result += "<ul>"
                        for match in matches_data['results'][:5]:
                            date = match.get('dateEvent', '–ù/–î')
                            home = match.get('strHomeTeam', '–ù/–î')
                            away = match.get('strAwayTeam', '–ù/–î')
                            score = f"{match.get('intHomeScore', '?')}:{match.get('intAwayScore', '?')}"
                            result += f"<li>{date}: {home} {score} {away}</li>"
                        result += "</ul>"
                    else:
                        result += "<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–∞—Ö</p>"
                    
                    # –ò–≥—Ä–æ–∫–∏
                    players_url = f"https://www.thesportsdb.com/api/v1/json/3/lookup_all_players.php?id={team_id}"
                    result += f"<p>URL —Å–æ—Å—Ç–∞–≤–∞: <a href='{players_url}' target='_blank'>{players_url}</a></p>"
                    
                    players_response = requests.get(players_url)
                    players_data = players_response.json()
                    
                    result += "<h4>–ò–≥—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥—ã:</h4>"
                    if players_data.get('player'):
                        result += "<ul>"
                        for player in players_data['player'][:10]:
                            name = player.get('strPlayer', '–ù/–î')
                            position = player.get('strPosition', '–ù/–î')
                            result += f"<li>{name} ({position})</li>"
                        result += "</ul>"
                    else:
                        result += "<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–∞–≤–µ</p>"
                else:
                    result += "<p>–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!</p>"
                    
            except Exception as e:
                result += f"<p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}</p>"
                
            return result
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É
        html = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–ª—è –∫–æ–º–∞–Ω–¥</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                h1 { color: #333; }
                hr { margin: 30px 0; }
                a { color: #0066cc; }
            </style>
        </head>
        <body>
            <h1>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–ª—è –∫–æ–º–∞–Ω–¥</h1>
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥
        html += get_team_info_formatted("–õ—é—Ü–µ—Ä–Ω", "FC Luzern")
        html += "<hr>"
        html += get_team_info_formatted("–ö—Å–∞–º–∞–∫—Å", "Neuchatel Xamax")
        
        html += "</body></html>"
        
        return html
    
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
@app.route('/set_webhook')
def set_webhook():
    s = bot.set_webhook(APP_URL + '/' + TELEGRAM_TOKEN)
    if s:
        return "Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    else:
        return "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook"

def setup_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    global dispatcher
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dispatcher = Dispatcher(bot, None, workers=0)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("team", team_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, process_matches))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook...")
    try:
        bot.set_webhook(APP_URL + '/' + TELEGRAM_TOKEN)
        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {APP_URL}")
    except TimedOut:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞. "
                       f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é, –ø–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ: {APP_URL}/set_webhook")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")

def run_polling():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)."""
    updater = Updater(TELEGRAM_TOKEN)
    dispatcher = updater.dispatcher
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("team", team_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, process_matches))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–µ–¥—ã
    if os.environ.get('USE_POLLING', 'False').lower() == 'true':
        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å polling
        print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        run_polling()
    else:
        # –ó–∞–ø—É—Å–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å webhook
        print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook...")
        setup_bot()
        # –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app.run(host='0.0.0.0', port=PORT) 